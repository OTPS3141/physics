# -*- coding: utf-8 -*-
"""
Created on Wed Dec 16 16:03:16 2020

@author: OTPS
"""

import numpy as np
from matplotlib import rc
import math
import matplotlib.pyplot as plt

from IPython.display import HTML, display

display(HTML("<table><tr><td><img src='qho-psi1.png'></td><td><img src='qho-psi2.png'></td></tr></table>"))

rc('font', **{'family': 'serif', 'serif': ['Computer Modern'], 'size': 14})
rc('text', usetex=True)

# PLOT_PROB=False plots the wavefunction psi; PLOT_PROB=True plots the density |psi|^2
PLOT_PROB = True

# Maximum quantum number to calculate wavefunction for
N = 6

# Some appearance settings
# Pad the x-axis on each side of the maximum turning points by this fraction
XPAD_FRAC = 1.3
# Scale the wavefunctions so they don't overlap
SCALING = 0.7
# Colors of the wavefunctions
if PLOT_PROB:
    COLOR = 'navy'
else:
    COLOR = 'cornflowerblue'

# Normalization constant and energy level for quantum number n
NORM_CONST = lambda n: 1./np.sqrt(np.sqrt(np.pi)*2**n*math.factorial(n))
get_E = lambda n: n + 0.5

def make_Hr():
    """Return a list of np.poly1d objects representing Hermite polynomials."""

    # Define the Hermite polynomials up to order N by recursion:
    # H_[n] = 2xH_[n-1] - 2(n-1)H_[n-2]
    Hr = [None] * (N + 1)
    Hr[0] = np.poly1d([1.,])
    Hr[1] = np.poly1d([2., 0.])
    for n in range(2, N+1):
        Hr[n] = Hr[1]*Hr[n-1] - 2*(n-1)*Hr[n-2]
    return Hr

Hr = make_Hr()

def get_psi(n, x):
    """Return the harmonic oscillator wavefunction for level n on grid x."""
    return NORM_CONST(n)*Hr[n](x)*np.exp(-x*x/2.)

def get_turning_points(n):
    """Return the classical turning points for state n."""
    xmax = np.sqrt(2. * get_E(n + 0.5))
    return -xmax, xmax

def get_potential(x):
    """Return potential energy on scaled oscillator displacement grid x."""
    return x**2 / 2


fig, ax = plt.subplots()
xmin, xmax = get_turning_points(N)
zmin, zmax = XPAD_FRAC * xmin, XPAD_FRAC * xmax
x = np.linspace(xmin, xmax, 500)
V = get_potential(x)

def plot_func(ax, f, scaling=1, yoffset=0):
    """Plot f*scaling with offset yoffset.

    The curve around the offset is filled with COLOR;

    """
    ax.plot(x, f*scaling + yoffset, color=COLOR)
    ax.fill_between(x, f*scaling + yoffset, yoffset, f > 0.,
                    color=COLOR, alpha=0.5)
    ax.fill_between(x, f*scaling + yoffset, yoffset, f < 0.,
                    color=COLOR, alpha=0.5)

# Plot the potential V(x).
ax.plot(x, V, color='k', linewidth=1.5)

# Plot each of the wavefunctions (or probability distributions) up to N.
for n in range(N+1):
    psi_n = get_psi(n, x)
    E_n = get_E(n)
    if PLOT_PROB:
        plot_func(ax, psi_n**2, scaling=SCALING*1.5, yoffset=E_n)
    else:
        plot_func(ax, psi_n, scaling=SCALING, yoffset=E_n)
    # Label energy levels, E = (v+0.5).hbar.omega.
    ax.text(s=r'$E_{{{}}} = ({}+\frac{{1}}{{2}})\hbar\omega$'.format(n,n), x=xmax+0.2,
            y=E_n, va='center')
    # Label the vibrational levels.
    if PLOT_PROB:
         ax.text(s=r'$|\psi_{{{}}}|^2$'.format(n), x=xmin-0.2, y=E_n, va='center', ha='right')
    else:
         ax.text(s=r'$\psi_{{{}}}$'.format(n), x=xmin-0.2, y=E_n, va='center', ha='right')

# Add a bit of space to the top of the plot.
ymax = E_n+0.5

if PLOT_PROB:
    ylabel = r'$|\psi(\xi)|^2$'
else:
    ylabel = r'$\psi(\xi)$'
ax.text(s=ylabel, x=0, y=ymax, va='bottom', ha='center')

ax.set_xlabel(r'$\xi$')
ax.set_xlim(zmin, zmax)
ax.set_ylim(0, ymax)
ax.spines['left'].set_position('center')
ax.set_yticks([])
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

plt.show()
